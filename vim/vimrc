let mapleader = ","
set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab
filetype plugin on
set mouse=a
filetype plugin indent on
set ignorecase
set smartcase
set nomodeline
set cursorline

" navigation
" netrw file browser
  let g:netrw_liststyle = 3
  nmap <leader>f :Explore %:h<cr>
  let g:netrw_banner = 0
  let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
  " let g:netrw_list_hide = '\.gitkeep,.*\.DS_Store,\.bundle,\.*\.vscode,\.*\.file_extension'
  " let g:netrw_fastbrowse = 2 "heavier caching <c-l> to refresh
  " let g:netrw_browse_split=2
  " let g:netrw_winsize = 25
  " nnoremap <leader>e :Explore<cr>
  " nnoremap <leader>es :Sexplore<cr>
  " nnoremap <leader>ev :Vexplore<cr>
  " autocmd FileType netrw setl bufhidden=wipe


" persistent undo
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile
" end persistent undo

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<SPACE>
endif
" End The Silver Searcher

nnoremap <leader>s :%s/
vnoremap <leader>c "*y
nnoremap <leader>c "*y
nnoremap <leader>v "*p
vnoremap <leader>v "*p
nnoremap <silent> ,/ :noh<cr>
nnoremap <silent> ,, :b#<cr>
nmap <c-o> o<esc>xk
nmap <c-i> O<esc>xj
inoremap <silent> jj <esc>

"set relativenumber
set number

if exists('&inccommand')
  set inccommand=split
endif

" Split Switching
if has('nvim')
  tnoremap <c-]> <C-\><C-n>
  tnoremap <c-h> <c-\><c-n><c-w>h
  tnoremap <c-j> <c-\><c-n><c-w>j
  tnoremap <c-k> <c-\><c-n><c-w>k
  tnoremap <c-l> <c-\><c-n><c-w>l
  nnoremap <c-h> <c-w>h
  nnoremap <c-j> <c-w>j
  noremap <c-j> <c-w>j
  nnoremap <c-k> <c-w>k
  noremap <c-k> <c-w>k
  nnoremap <c-l> <c-w>l
endif

" auto create directories when saving
augroup Mkdir
  autocmd!
  autocmd BufWritePre *
    \ if !isdirectory(expand("<afile>:p:h")) |
        \ call mkdir(expand("<afile>:p:h"), "p") |
    \ endif
augroup END
" end auto create directories when saving

let g:markdown_fenced_languages = ['html', 'vim', 'ruby', 'python', 'bash=sh', 'javascript', 'elixir']

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-surround'
Plug 'machakann/vim-highlightedyank'
Plug 'rhysd/vim-crystal'

Plug 'tpope/vim-sensible'
  if has('nvim')
    let g:loaded_sensible=0
  endif

Plug 'ctrlpvim/ctrlp.vim'
  nnoremap <C-f> :CtrlP<CR>
  nnoremap <C-b> :CtrlPBuffer<CR>
  let g:ctrlp_match_current_file=1
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip,_build,**/node_modules,deps     " MacOSX/Linux
  let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
  let g:ctrlp_prompt_mappings = {
    \ 'PrtDeleteEnt()':       ['<c-d>']
    \ }

Plug 'qpkorr/vim-bufkill'
  nnoremap <leader>d :BD<CR>

Plug 'kassio/neoterm'
  set splitright
  let g:neoterm_default_mod='rightbelow'
  " don't close terminal
  autocmd TermOpen * set bufhidden=hide
  autocmd TermClose * bd!
  " put terminal in insert mode when you switch to it
  autocmd BufWinEnter,WinEnter term://* startinsert
  autocmd BufLeave term://* stopinsert
  " hide/close terminal
  nnoremap <silent> <c-t><c-t> :Ttoggle<cr>
  nnoremap <silent> <c-t><c-s> :rightbelow Ttoggle<cr>
  nnoremap <silent> <c-t><c-v> :vert Ttoggle<cr>
  " clear terminal
  nnoremap <silent> <leader>nc :Tclose<cr>

Plug 'janko-m/vim-test'
  let test#strategy = "neoterm"
  nmap <silent> <leader>t :TestFile<CR>
  nmap <silent> <leader>T :TestNearest<CR>
  nmap <silent> <leader>a :TestSuite<CR>
  nmap <silent> <leader>l :TestLast<CR>
  nmap <silent> <leader>g :TestVisit<CR>

Plug 'jiangmiao/auto-pairs'

" Plug 'scrooloose/nerdtree'
"   let NERDTreeHijackNetrw=1
"   let NERDTreeMinimalUI=1
"   let NERDTreeCascadeSingleChildDir=0
"   nnoremap <leader>nn :NERDTreeToggle<CR>
"   nnoremap <leader>nf :NERDTreeFind<CR>
"   let NERDTreeMapJumpNextSibling='<c-n>'
" Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-endwise'
Plug 'ngmy/vim-rubocop'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1


Plug 'mattn/emmet-vim'
  let g:user_emmet_expandabbr_key = '<C-e>'
  let g:user_emmet_next_key = '<C-n>'
  let g:user_emmet_prev_key = '<C-p>'

Plug 'SirVer/ultisnips'
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-tab>'

Plug 'honza/vim-snippets'

Plug 'nathanaelkane/vim-indent-guides'
  " let g:indent_guides_enable_on_vim_startup = 1 "default
  let g:indent_guides_guide_size = 2
  nmap<Leader>g :IndentGuidesToggle<CR>

Plug 'elixir-lang/vim-elixir'
Plug 'posva/vim-vue'

" Colors..............................................................
syntax on
set termguicolors

Plug 'https://github.com/bdtomlin/vim-deep-space.git', {'type': 'opt'}

call plug#end()
  let g:deepspace_italics=1
  colorscheme deep-space
